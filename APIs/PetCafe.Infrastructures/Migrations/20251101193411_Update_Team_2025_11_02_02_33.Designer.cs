// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetCafe.Infrastructures;

#nullable disable

namespace PetCafe.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251101193411_Update_Team_2025_11_02_02_33")]
    partial class Update_Team_2025_11_02_02_33
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetCafe.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("i_x_accounts_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("i_x_accounts_username");

                    b.HasIndex("Role", "IsActive")
                        .HasDatabaseName("i_x_accounts_role_is_active");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("max_capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_areas_name");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.AreaWorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_type_id");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("i_x_area_work_types_area_id");

                    b.HasIndex("WorkTypeId")
                        .HasDatabaseName("i_x_area_work_types_work_type_id");

                    b.ToTable("area_work_types");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer")
                        .HasColumnName("loyalty_points");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("i_x_customers_account_id");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("i_x_customers_phone");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.CustomerBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("booking_status");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancel_date");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text")
                        .HasColumnName("cancel_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_detail_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("slot_id");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId")
                        .IsUnique()
                        .HasDatabaseName("i_x_customer_bookings_order_detail_id");

                    b.HasIndex("SlotId")
                        .HasDatabaseName("i_x_customer_bookings_slot_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_customer_bookings_team_id");

                    b.HasIndex("CustomerId", "BookingDate")
                        .HasDatabaseName("i_x_customer_bookings_customer_id_booking_date");

                    b.HasIndex("ServiceId", "SlotId")
                        .HasDatabaseName("i_x_customer_bookings_service_id_slot_id");

                    b.ToTable("customer_bookings");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.DailySchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_member_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("WorkShiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_shift_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("i_x_daily_schedules_employee_id");

                    b.HasIndex("TeamMemberId")
                        .HasDatabaseName("i_x_daily_schedules_team_member_id");

                    b.HasIndex("WorkShiftId")
                        .HasDatabaseName("i_x_daily_schedules_work_shift_id");

                    b.ToTable("daily_schedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.DailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("priority");

                    b.Property<Guid?>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("slot_id");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .HasDatabaseName("i_x_daily_tasks_slot_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("i_x_daily_tasks_task_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_daily_tasks_team_id");

                    b.ToTable("daily_tasks");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<double?>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("skills");

                    b.Property<string>("SubRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_account_id");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_phone");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("health_status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_check_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("symptoms");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<string>("Treatment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("treatment");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Veterinarian")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("veterinarian");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("PetId", "CheckDate")
                        .HasDatabaseName("i_x_health_records_pet_id_check_date");

                    b.ToTable("health_records");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("notification_type");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("Normal")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_date");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("reference_type");

                    b.Property<DateTime?>("ScheduledSendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_send_date");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledSendDate")
                        .HasDatabaseName("i_x_notifications_scheduled_send_date");

                    b.HasIndex("AccountId", "IsRead")
                        .HasDatabaseName("i_x_notifications_account_id_is_read");

                    b.HasIndex("NotificationType", "CreatedAt")
                        .HasDatabaseName("i_x_notifications_notification_type_created_at");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<double>("FinalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("final_amount");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentDataJson")
                        .HasColumnType("text")
                        .HasColumnName("payment_data");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("i_x_orders_employee_id");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("i_x_orders_order_date");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_orders_order_number");

                    b.HasIndex("CustomerId", "OrderDate")
                        .HasDatabaseName("i_x_orders_customer_id_order_date");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_date");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uuid")
                        .HasColumnName("breed_id");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Preferences")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("preferences");

                    b.Property<string>("SpecialNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("special_notes");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("BreedId")
                        .HasDatabaseName("i_x_pets_breed_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("i_x_pets_group_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_pets_name");

                    b.HasIndex("SpeciesId")
                        .HasDatabaseName("i_x_pets_species_id");

                    b.ToTable("pets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetBreed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("AverageLifespan")
                        .HasColumnType("integer")
                        .HasColumnName("average_lifespan");

                    b.Property<double>("AverageWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("average_weight");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId")
                        .HasDatabaseName("i_x_pet_breeds_species_id");

                    b.HasIndex("Name", "SpeciesId")
                        .IsUnique()
                        .HasDatabaseName("i_x_pet_breeds_name_species_id");

                    b.ToTable("pet_breeds");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("PetBreedId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_breed_id");

                    b.Property<Guid?>("PetSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_species_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PetBreedId")
                        .HasDatabaseName("i_x_pet_groups_pet_breed_id");

                    b.HasIndex("PetSpeciesId")
                        .HasDatabaseName("i_x_pet_groups_pet_species_id");

                    b.ToTable("pet_groups");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("pet_species");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsForPets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_for_pets");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("integer")
                        .HasColumnName("min_stock_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.Property<string>("Thumbnails")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("thumbnails");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_products_name");

                    b.HasIndex("CategoryId", "IsActive")
                        .HasDatabaseName("i_x_products_category_id_is_active");

                    b.ToTable("products");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_product_categories_name");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double>("FinalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("final_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("i_x_product_orders_order_id");

                    b.ToTable("product_orders");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsForFeeding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_for_feeding");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("notes");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("ProductOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("i_x_product_order_details_product_id");

                    b.HasIndex("ProductOrderId", "ProductId")
                        .HasDatabaseName("i_x_product_order_details_product_order_id_product_id");

                    b.ToTable("product_order_details");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("base_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<string>("Thumbnails")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("thumbnails");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("i_x_services_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_services_name");

                    b.HasIndex("TaskId")
                        .IsUnique()
                        .HasDatabaseName("i_x_services_task_id");

                    b.ToTable("services");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerBookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_booking_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("feedback_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CustomerBookingId")
                        .IsUnique()
                        .HasDatabaseName("i_x_service_feedbacks_customer_booking_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("i_x_service_feedbacks_customer_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("i_x_service_feedbacks_service_id");

                    b.ToTable("service_feedbacks");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double>("FinalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("final_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("i_x_service_orders_order_date");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("i_x_service_orders_order_id");

                    b.ToTable("service_orders");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("notes");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_order_id");

                    b.Property<Guid?>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("slot_id");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("i_x_service_order_details_service_id");

                    b.HasIndex("ServiceOrderId")
                        .HasDatabaseName("i_x_service_order_details_service_order_id");

                    b.HasIndex("SlotId")
                        .HasDatabaseName("i_x_service_order_details_slot_id");

                    b.ToTable("service_order_details");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("text")
                        .HasColumnName("day_of_week");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("max_capacity");

                    b.Property<Guid?>("PetGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_group_id");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<string>("ServiceStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("is_active");

                    b.Property<string>("SpecialNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("special_notes");

                    b.Property<DateTime?>("SpecificDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("specific_date");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("i_x_slots_area_id");

                    b.HasIndex("PetGroupId")
                        .HasDatabaseName("i_x_slots_pet_group_id");

                    b.HasIndex("PetId")
                        .HasDatabaseName("i_x_slots_pet_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("i_x_slots_service_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("i_x_slots_task_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_slots_team_id");

                    b.ToTable("slots");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("storages");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("EstimatedHours")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_hours");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("priority");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_type_id");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("i_x_tasks_status");

                    b.HasIndex("WorkTypeId")
                        .HasDatabaseName("i_x_tasks_work_type_id");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId")
                        .HasDatabaseName("i_x_teams_leader_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_teams_name");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("i_x_team_members_employee_id");

                    b.HasIndex("TeamId", "EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("i_x_team_members_team_id_employee_id");

                    b.ToTable("team_members");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamWorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("WorkShiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_shift_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_team_work_shifts_team_id");

                    b.HasIndex("WorkShiftId")
                        .HasDatabaseName("i_x_team_work_shifts_work_shift_id");

                    b.ToTable("team_work_shifts");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamWorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_team_work_types_team_id");

                    b.HasIndex("WorkTypeId")
                        .HasDatabaseName("i_x_team_work_types_work_type_id");

                    b.ToTable("team_work_types");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("OrderCode")
                        .HasColumnType("double precision")
                        .HasColumnName("order_code");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentLinkId")
                        .HasColumnType("text")
                        .HasColumnName("payment_link_id");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("TransactionDateTime")
                        .HasColumnType("text")
                        .HasColumnName("transaction_date_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("i_x_transactions_order_id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("batch_number");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clinic_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_due_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("vaccination_date");

                    b.Property<Guid>("VaccineTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_type_id");

                    b.Property<string>("Veterinarian")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("veterinarian");

                    b.HasKey("Id");

                    b.HasIndex("VaccineTypeId")
                        .HasDatabaseName("i_x_vaccination_records_vaccine_type_id");

                    b.HasIndex("PetId", "VaccineTypeId", "VaccinationDate")
                        .HasDatabaseName("i_x_vaccination_records_pet_id_vaccine_type_id_vaccination_date");

                    b.ToTable("vaccination_records");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("record_id");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("VaccineTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_type_id");

                    b.HasKey("Id");

                    b.HasIndex("RecordId")
                        .IsUnique()
                        .HasDatabaseName("i_x_vaccination_schedules_record_id");

                    b.HasIndex("ScheduledDate")
                        .HasDatabaseName("i_x_vaccination_schedules_scheduled_date");

                    b.HasIndex("VaccineTypeId")
                        .HasDatabaseName("i_x_vaccination_schedules_vaccine_type_id");

                    b.HasIndex("PetId", "ScheduledDate")
                        .HasDatabaseName("i_x_vaccination_schedules_pet_id_scheduled_date");

                    b.ToTable("vaccination_schedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("IntervalMonths")
                        .HasColumnType("integer")
                        .HasColumnName("interval_months");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("RequiredDoses")
                        .HasColumnType("integer")
                        .HasColumnName("required_doses");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_vaccine_types_name");

                    b.HasIndex("SpeciesId")
                        .HasDatabaseName("i_x_vaccine_types_species_id");

                    b.ToTable("vaccine_types");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApplicableDays")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("applicable_days");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_work_shifts_name");

                    b.ToTable("work_shifts");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("work_types");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.AreaWorkType", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Area", "Area")
                        .WithMany("AreaWorkTypes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_area_work_types_areas_area_id");

                    b.HasOne("PetCafe.Domain.Entities.WorkType", "WorkType")
                        .WithMany("AreaWorkTypes")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_area_work_types_work_types_work_type_id");

                    b.Navigation("Area");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Customer", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("PetCafe.Domain.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customers_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.CustomerBooking", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_customer_bookings_customers_customer_id");

                    b.HasOne("PetCafe.Domain.Entities.ServiceOrderDetail", "OrderDetail")
                        .WithOne("Booking")
                        .HasForeignKey("PetCafe.Domain.Entities.CustomerBooking", "OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customer_bookings_service_order_details_order_detail_id");

                    b.HasOne("PetCafe.Domain.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customer_bookings_services_service_id");

                    b.HasOne("PetCafe.Domain.Entities.Slot", "Slot")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customer_bookings_slots_slot_id");

                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("Bookings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customer_bookings_teams_team_id");

                    b.Navigation("Customer");

                    b.Navigation("OrderDetail");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.DailySchedule", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("DailySchedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_daily_schedules_employees_employee_id");

                    b.HasOne("PetCafe.Domain.Entities.TeamMember", "TeamMember")
                        .WithMany("DailySchedules")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_daily_schedules_team_members_team_member_id");

                    b.HasOne("PetCafe.Domain.Entities.WorkShift", "WorkShift")
                        .WithMany("DailySchedules")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_daily_schedules_work_shifts_work_shift_id");

                    b.Navigation("Employee");

                    b.Navigation("TeamMember");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.DailyTask", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Slot", "Slot")
                        .WithMany("DailyTasks")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_daily_tasks_slots_slot_id");

                    b.HasOne("PetCafe.Domain.Entities.Task", "Task")
                        .WithMany("DailyTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_daily_tasks_tasks_task_id");

                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("DailyTasks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_daily_tasks_teams_team_id");

                    b.Navigation("Slot");

                    b.Navigation("Task");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Employee", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("PetCafe.Domain.Entities.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_employees_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("HealthRecords")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_health_records_pets_pet_id");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Notification", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_notifications_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Order", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_orders_customers_customer_id");

                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_orders_employees_employee_id");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Pet", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.PetBreed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_pets_pet_breeds_breed_id");

                    b.HasOne("PetCafe.Domain.Entities.PetGroup", "Group")
                        .WithMany("Pets")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("f_k_pets_pet_groups_group_id");

                    b.HasOne("PetCafe.Domain.Entities.PetSpecies", "Species")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_pets_pet_species_species_id");

                    b.Navigation("Breed");

                    b.Navigation("Group");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetBreed", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.PetSpecies", "Species")
                        .WithMany("PetBreeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_pet_breeds_pet_species_species_id");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetGroup", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.PetBreed", "PetBreed")
                        .WithMany()
                        .HasForeignKey("PetBreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_pet_groups_pet_breeds_pet_breed_id");

                    b.HasOne("PetCafe.Domain.Entities.PetSpecies", "PetSpecies")
                        .WithMany()
                        .HasForeignKey("PetSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_pet_groups_pet_species_pet_species_id");

                    b.Navigation("PetBreed");

                    b.Navigation("PetSpecies");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Product", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_products_product_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductOrder", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Order", "Order")
                        .WithOne("ProductOrder")
                        .HasForeignKey("PetCafe.Domain.Entities.ProductOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_product_orders_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductOrderDetail", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_product_order_details_products_product_id");

                    b.HasOne("PetCafe.Domain.Entities.ProductOrder", "ProductOrder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_product_order_details_product_orders_product_order_id");

                    b.Navigation("Product");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Service", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Task", "Task")
                        .WithOne("Service")
                        .HasForeignKey("PetCafe.Domain.Entities.Service", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_services_tasks_task_id");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceFeedback", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.CustomerBooking", "CustomerBooking")
                        .WithOne("Feedback")
                        .HasForeignKey("PetCafe.Domain.Entities.ServiceFeedback", "CustomerBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_service_feedbacks_customer_bookings_customer_booking_id");

                    b.HasOne("PetCafe.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_service_feedbacks_customers_customer_id");

                    b.HasOne("PetCafe.Domain.Entities.Service", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_service_feedbacks_services_service_id");

                    b.Navigation("Customer");

                    b.Navigation("CustomerBooking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceOrder", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Order", "Order")
                        .WithOne("ServiceOrder")
                        .HasForeignKey("PetCafe.Domain.Entities.ServiceOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_service_orders_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceOrderDetail", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Service", "Service")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_service_order_details_services_service_id");

                    b.HasOne("PetCafe.Domain.Entities.ServiceOrder", "ServiceOrder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_service_order_details_service_orders_service_order_id");

                    b.HasOne("PetCafe.Domain.Entities.Slot", "Slot")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_service_order_details_slots_slot_id");

                    b.Navigation("Service");

                    b.Navigation("ServiceOrder");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Slot", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Area", "Area")
                        .WithMany("Slots")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_slots_areas_area_id");

                    b.HasOne("PetCafe.Domain.Entities.PetGroup", "PetGroup")
                        .WithMany("Slots")
                        .HasForeignKey("PetGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_slots_pet_groups_pet_group_id");

                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("Slots")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_slots_pets_pet_id");

                    b.HasOne("PetCafe.Domain.Entities.Service", "Service")
                        .WithMany("Slots")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_slots_services_service_id");

                    b.HasOne("PetCafe.Domain.Entities.Task", "Task")
                        .WithMany("Slots")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_slots_tasks_task_id");

                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("Slots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_slots_teams_team_id");

                    b.Navigation("Area");

                    b.Navigation("Pet");

                    b.Navigation("PetGroup");

                    b.Navigation("Service");

                    b.Navigation("Task");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Task", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.WorkType", "WorkType")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_tasks_work_types_work_type_id");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Team", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("f_k_teams_employees_leader_id");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("TeamMembers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_members_employees_employee_id");

                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_members_teams_team_id");

                    b.Navigation("Employee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamWorkShift", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("TeamWorkShifts")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_work_shifts_teams_team_id");

                    b.HasOne("PetCafe.Domain.Entities.WorkShift", "WorkShift")
                        .WithMany("TeamWorkShifts")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_work_shifts_work_shifts_work_shift_id");

                    b.Navigation("Team");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamWorkType", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("TeamWorkTypes")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_work_types_teams_team_id");

                    b.HasOne("PetCafe.Domain.Entities.WorkType", "WorkType")
                        .WithMany("TeamWorkTypes")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_work_types_work_types_work_type_id");

                    b.Navigation("Team");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("f_k_transactions_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationRecord", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_records_pets_pet_id");

                    b.HasOne("PetCafe.Domain.Entities.VaccineType", "VaccineType")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_records_vaccine_types_vaccine_type_id");

                    b.Navigation("Pet");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationSchedule", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_schedules_pets_pet_id");

                    b.HasOne("PetCafe.Domain.Entities.VaccinationRecord", "Record")
                        .WithOne("Schedule")
                        .HasForeignKey("PetCafe.Domain.Entities.VaccinationSchedule", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_vaccination_schedules_vaccination_records_record_id");

                    b.HasOne("PetCafe.Domain.Entities.VaccineType", "VaccineType")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_schedules_vaccine_types_vaccine_type_id");

                    b.Navigation("Pet");

                    b.Navigation("Record");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccineType", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.PetSpecies", "Species")
                        .WithMany("VaccineTypes")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_vaccine_types_pet_species_species_id");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Area", b =>
                {
                    b.Navigation("AreaWorkTypes");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.CustomerBooking", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Employee", b =>
                {
                    b.Navigation("DailySchedules");

                    b.Navigation("Orders");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Order", b =>
                {
                    b.Navigation("ProductOrder");

                    b.Navigation("ServiceOrder");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Pet", b =>
                {
                    b.Navigation("HealthRecords");

                    b.Navigation("Slots");

                    b.Navigation("VaccinationRecords");

                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetBreed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetGroup", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetSpecies", b =>
                {
                    b.Navigation("PetBreeds");

                    b.Navigation("Pets");

                    b.Navigation("VaccineTypes");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Service", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceOrderDetail", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Slot", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("DailyTasks");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Task", b =>
                {
                    b.Navigation("DailyTasks");

                    b.Navigation("Service");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Team", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DailyTasks");

                    b.Navigation("Slots");

                    b.Navigation("TeamMembers");

                    b.Navigation("TeamWorkShifts");

                    b.Navigation("TeamWorkTypes");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("DailySchedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationRecord", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccineType", b =>
                {
                    b.Navigation("VaccinationRecords");

                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.WorkShift", b =>
                {
                    b.Navigation("DailySchedules");

                    b.Navigation("TeamWorkShifts");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.WorkType", b =>
                {
                    b.Navigation("AreaWorkTypes");

                    b.Navigation("Tasks");

                    b.Navigation("TeamWorkTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
