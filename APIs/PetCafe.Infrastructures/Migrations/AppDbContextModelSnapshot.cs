// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetCafe.Infrastructures;

#nullable disable

namespace PetCafe.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetCafe.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("i_x_accounts_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("i_x_accounts_username");

                    b.HasIndex("Role", "IsActive")
                        .HasDatabaseName("i_x_accounts_role_is_active");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("area_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("max_capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<TimeSpan?>("OperatingHoursEnd")
                        .HasColumnType("interval")
                        .HasColumnName("operating_hours_end");

                    b.Property<TimeSpan?>("OperatingHoursStart")
                        .HasColumnType("interval")
                        .HasColumnName("operating_hours_start");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AreaCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_areas_area_code");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_areas_name");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.AreaService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentBookings")
                        .HasColumnType("integer")
                        .HasColumnName("current_bookings");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_available");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("max_capacity");

                    b.Property<double>("PriceAdjustment")
                        .HasColumnType("double precision")
                        .HasColumnName("price_adjustment");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<string>("SpecialNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("special_notes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("i_x_area_services_service_id");

                    b.HasIndex("AreaId", "ServiceId")
                        .IsUnique()
                        .HasDatabaseName("i_x_area_services_area_id_service_id");

                    b.ToTable("area_services");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.BookingPet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<Guid>("ServiceBookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_booking_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PetId")
                        .HasDatabaseName("i_x_booking_pets_pet_id");

                    b.HasIndex("ServiceBookingId", "PetId")
                        .IsUnique()
                        .HasDatabaseName("i_x_booking_pets_service_booking_id_pet_id");

                    b.ToTable("booking_pets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer")
                        .HasColumnName("loyalty_points");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("i_x_customers_account_id");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("i_x_customers_phone");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("employee_code");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position");

                    b.Property<double?>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_account_id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_employee_code");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_phone");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.EmployeeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_in_time");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_out_time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Scheduled")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("work_date");

                    b.Property<Guid>("WorkShiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_shift_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkDate")
                        .HasDatabaseName("i_x_employee_schedules_work_date");

                    b.HasIndex("WorkShiftId")
                        .HasDatabaseName("i_x_employee_schedules_work_shift_id");

                    b.HasIndex("EmployeeId", "WorkDate")
                        .IsUnique()
                        .HasDatabaseName("i_x_employee_schedules_employee_id_work_date");

                    b.ToTable("employee_schedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("health_status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_check_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("symptoms");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<string>("Treatment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("treatment");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Veterinarian")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("veterinarian");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("PetId", "CheckDate")
                        .HasDatabaseName("i_x_health_records_pet_id_check_date");

                    b.ToTable("health_records");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("notification_type");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("Normal")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_date");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("reference_type");

                    b.Property<DateTime?>("ScheduledSendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_send_date");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledSendDate")
                        .HasDatabaseName("i_x_notifications_scheduled_send_date");

                    b.HasIndex("AccountId", "IsRead")
                        .HasDatabaseName("i_x_notifications_account_id_is_read");

                    b.HasIndex("NotificationType", "CreatedAt")
                        .HasDatabaseName("i_x_notifications_notification_type_created_at");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_amount");

                    b.Property<double>("FinalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("final_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("payment_status");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Processing")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("i_x_orders_order_date");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_orders_order_number");

                    b.HasIndex("CustomerId", "OrderDate")
                        .HasDatabaseName("i_x_orders_customer_id_order_date");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsForFeeding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_for_feeding");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("i_x_order_details_product_id");

                    b.HasIndex("OrderId", "ProductId")
                        .HasDatabaseName("i_x_order_details_order_id_product_id");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("ArrivalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Personality")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("personality");

                    b.Property<Guid>("PetBreedId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_breed_id");

                    b.Property<Guid>("PetStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_status_id");

                    b.Property<string>("SpecialNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("special_notes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_pets_name");

                    b.HasIndex("PetBreedId")
                        .HasDatabaseName("i_x_pets_pet_breed_id");

                    b.HasIndex("PetStatusId")
                        .HasDatabaseName("i_x_pets_pet_status_id");

                    b.ToTable("pets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetBreed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("species");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Species")
                        .IsUnique()
                        .HasDatabaseName("i_x_pet_breeds_name_species");

                    b.ToTable("pet_breeds");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetSpecific", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("attribute_name");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("attribute_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PetId", "AttributeName")
                        .HasDatabaseName("i_x_pet_specifics_pet_id_attribute_name");

                    b.ToTable("pet_specifics");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_pet_status_name");

                    b.ToTable("pet_status");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsForPets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_for_pets");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("integer")
                        .HasColumnName("min_stock_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_category_id");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_products_name");

                    b.HasIndex("ProductCategoryId", "IsActive")
                        .HasDatabaseName("i_x_products_product_category_id_is_active");

                    b.ToTable("products");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_product_categories_name");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("base_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("max_participants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("requires_area");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("service_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_services_name");

                    b.HasIndex("ServiceType", "IsActive")
                        .HasDatabaseName("i_x_services_service_type_is_active");

                    b.ToTable("services");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AreaAdjustment")
                        .HasColumnType("double precision")
                        .HasColumnName("area_adjustment");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<double>("BaseAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("base_amount");

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("booking_number");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("booking_status");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("FeedbackComment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("feedback_comment");

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("feedback_date");

                    b.Property<int?>("FeedbackRating")
                        .HasColumnType("integer")
                        .HasColumnName("feedback_rating");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Participants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("participants");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("payment_status");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<TimeSpan>("ScheduledTime")
                        .HasColumnType("interval")
                        .HasColumnName("scheduled_time");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("special_requests");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("i_x_service_bookings_area_id");

                    b.HasIndex("BookingNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_service_bookings_booking_number");

                    b.HasIndex("CustomerId", "BookingDate")
                        .HasDatabaseName("i_x_service_bookings_customer_id_booking_date");

                    b.HasIndex("ScheduledDate", "AreaId")
                        .HasDatabaseName("i_x_service_bookings_scheduled_date_area_id");

                    b.HasIndex("ServiceId", "ScheduledDate")
                        .HasDatabaseName("i_x_service_bookings_service_id_scheduled_date");

                    b.ToTable("service_bookings");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.StaffAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("assignment_type");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Assigned")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "AssignedDate")
                        .HasDatabaseName("i_x_staff_assignments_employee_id_assigned_date");

                    b.HasIndex("OrderId", "EmployeeId", "AssignmentType")
                        .HasDatabaseName("i_x_staff_assignments_order_id_employee_id_assignment_type");

                    b.ToTable("staff_assignments");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("integer")
                        .HasColumnName("actual_hours");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<int?>("EstimatedHours")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_hours");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("Medium")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("i_x_tasks_due_date");

                    b.HasIndex("TeamId", "Status")
                        .HasDatabaseName("i_x_tasks_team_id_status");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TaskAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Assigned")
                        .HasColumnName("status");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "Status")
                        .HasDatabaseName("i_x_task_assignments_employee_id_status");

                    b.HasIndex("TaskId", "EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("i_x_task_assignments_task_id_employee_id");

                    b.ToTable("task_assignments");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("TeamType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("team_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId")
                        .HasDatabaseName("i_x_teams_leader_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_teams_name");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("i_x_team_members_employee_id");

                    b.HasIndex("TeamId", "EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("i_x_team_members_team_id_employee_id");

                    b.ToTable("team_members");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("batch_number");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clinic_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_due_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("vaccination_date");

                    b.Property<Guid>("VaccineTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_type_id");

                    b.Property<string>("Veterinarian")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("veterinarian");

                    b.HasKey("Id");

                    b.HasIndex("VaccineTypeId")
                        .HasDatabaseName("i_x_vaccination_records_vaccine_type_id");

                    b.HasIndex("PetId", "VaccineTypeId", "VaccinationDate")
                        .HasDatabaseName("i_x_vaccination_records_pet_id_vaccine_type_id_vaccination_date");

                    b.ToTable("vaccination_records");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<bool>("ReminderSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("reminder_sent");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("VaccineTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_type_id");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledDate")
                        .HasDatabaseName("i_x_vaccination_schedules_scheduled_date");

                    b.HasIndex("VaccineTypeId")
                        .HasDatabaseName("i_x_vaccination_schedules_vaccine_type_id");

                    b.HasIndex("PetId", "ScheduledDate")
                        .HasDatabaseName("i_x_vaccination_schedules_pet_id_scheduled_date");

                    b.ToTable("vaccination_schedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("integer")
                        .HasColumnName("duration_months");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_mandatory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("species");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Species")
                        .IsUnique()
                        .HasDatabaseName("i_x_vaccine_types_name_species");

                    b.ToTable("vaccine_types");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_work_shifts_name");

                    b.ToTable("work_shifts");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.AreaService", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Area", "Area")
                        .WithMany("AreaServices")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_area_services_areas_area_id");

                    b.HasOne("PetCafe.Domain.Entities.Service", "Service")
                        .WithMany("AreaServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_area_services_services_service_id");

                    b.Navigation("Area");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.BookingPet", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("BookingPets")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_booking_pets_pets_pet_id");

                    b.HasOne("PetCafe.Domain.Entities.ServiceBooking", "ServiceBooking")
                        .WithMany("BookingPets")
                        .HasForeignKey("ServiceBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_booking_pets_service_bookings_service_booking_id");

                    b.Navigation("Pet");

                    b.Navigation("ServiceBooking");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Customer", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("PetCafe.Domain.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customers_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Employee", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("PetCafe.Domain.Entities.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_employees_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.EmployeeSchedule", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_employee_schedules_employees_employee_id");

                    b.HasOne("PetCafe.Domain.Entities.WorkShift", "WorkShift")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_employee_schedules_work_shifts_work_shift_id");

                    b.Navigation("Employee");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("HealthRecords")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_health_records_pets_pet_id");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Notification", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_notifications_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Order", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_orders_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_order_details_orders_order_id");

                    b.HasOne("PetCafe.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_order_details_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Pet", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.PetBreed", "PetBreed")
                        .WithMany("Pets")
                        .HasForeignKey("PetBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_pets_pet_breeds_pet_breed_id");

                    b.HasOne("PetCafe.Domain.Entities.PetStatus", "PetStatus")
                        .WithMany("Pets")
                        .HasForeignKey("PetStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_pets_pet_status_pet_status_id");

                    b.Navigation("PetBreed");

                    b.Navigation("PetStatus");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetSpecific", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("PetSpecifics")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_pet_specifics_pets_pet_id");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Product", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_products_product_categories_product_category_id");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceBooking", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Area", "Area")
                        .WithMany("ServiceBookings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_service_bookings_areas_area_id");

                    b.HasOne("PetCafe.Domain.Entities.Customer", "Customer")
                        .WithMany("ServiceBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_service_bookings_customers_customer_id");

                    b.HasOne("PetCafe.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_service_bookings_services_service_id");

                    b.Navigation("Area");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.StaffAssignment", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("StaffAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_staff_assignments_employees_employee_id");

                    b.HasOne("PetCafe.Domain.Entities.Order", "Order")
                        .WithMany("StaffAssignments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_staff_assignments_orders_order_id");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Task", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_tasks_teams_team_id");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TaskAssignment", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_task_assignments_employees_employee_id");

                    b.HasOne("PetCafe.Domain.Entities.Task", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_task_assignments_tasks_task_id");

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Team", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_teams_employees_leader_id");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Employee", "Employee")
                        .WithMany("TeamMembers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_members_employees_employee_id");

                    b.HasOne("PetCafe.Domain.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_team_members_teams_team_id");

                    b.Navigation("Employee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationRecord", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_records_pets_pet_id");

                    b.HasOne("PetCafe.Domain.Entities.VaccineType", "VaccineType")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_records_vaccine_types_vaccine_type_id");

                    b.Navigation("Pet");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccinationSchedule", b =>
                {
                    b.HasOne("PetCafe.Domain.Entities.Pet", "Pet")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_schedules_pets_pet_id");

                    b.HasOne("PetCafe.Domain.Entities.VaccineType", "VaccineType")
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_vaccination_schedules_vaccine_types_vaccine_type_id");

                    b.Navigation("Pet");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Area", b =>
                {
                    b.Navigation("AreaServices");

                    b.Navigation("ServiceBookings");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ServiceBookings");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeSchedules");

                    b.Navigation("StaffAssignments");

                    b.Navigation("TaskAssignments");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("StaffAssignments");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Pet", b =>
                {
                    b.Navigation("BookingPets");

                    b.Navigation("HealthRecords");

                    b.Navigation("PetSpecifics");

                    b.Navigation("VaccinationRecords");

                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetBreed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.PetStatus", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Service", b =>
                {
                    b.Navigation("AreaServices");

                    b.Navigation("ServiceBookings");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.ServiceBooking", b =>
                {
                    b.Navigation("BookingPets");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Task", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.Team", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.VaccineType", b =>
                {
                    b.Navigation("VaccinationRecords");

                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("PetCafe.Domain.Entities.WorkShift", b =>
                {
                    b.Navigation("EmployeeSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
